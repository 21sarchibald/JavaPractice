Java Overview

    - Used all over the world on billions of machines
    - Lots of job opportunities in Java
    - Similar to C# or C++
    - Uses classes


Java Syntax

    - Text must be wrapped inside double quotations
    - Comments 
        // Single line Comments
        /* Multi-line
           Comments */
    - Variables must be given a type upon declaration


Variables

    - String (text)
    - int (whole numbers)
    - float (decimals)
    - char (single characters)
    - boolean (true or false)

    - Final Variables
       - By using the final keyword (ex: final int myNumber = 5), you can make it so the number cannot be overwritten/changed.


Conditionals (if else statements)

    Syntax:

        boolean isRaining = true;

        if (isRaining) {
            System.out.println("Bring an umbrella!");
        }

     - Can use if, else, else if, and switch blocks

    Short Hand if..else statement

    Syntax:

        variable = (condition) ? expressionTrue : expressionFalse;

Switch statements

    Syntax:

        switch(expression) {
            case x:
            // code block
            break;

            case y:
            // code block
            break;

            default:
            // code block
        }

    - The default statement runs if there is no match.
    - The case can only be a value, not an expression
        Ex: it couldn't be x % 2 == 0, but could be the int 1


Loops

    While Loops

        Syntax:
            while (condition) {
                // code block to be executed
            }

        Example:
            int i = 1;
            while (i < 6) {
                System.out.println(i);
                i++; // make sure to change counter variable to avoid infinite loop
            }

    Do/While Loops

        - The code will execute the code once before checking if the condition is true.

        Syntax:
            do {
                // code block to be executed
            }
            while (condition);

        Example:
            int i = 0;
            do {
                System.out.println(i);
                i++; // make sure to change counter variable to avoid infinite loop
            }
            while (i < 5);

    For Loops
        
        Syntax:
            for (statement 1; statement 2; statement 3) {
                // code block to be executed
            }

            - Statement 1 is executed one time before the execution of the code block
            - Statement 2 defines condition for executing code block
            - Statement 3 is executed every time after the code block has been executed

        Example:
            for (int i = 0; i < 5; i++) {
                System.out.println(i);
            }
    
    For-Each Loops

        - Used to loop through items in an array (or another data structure)

        Syntax:
            for (type variableName : arrayName) {
                // code block to be executed
            }

        Example1:
            String[] stores = {"Target", "Trader Joe's", "Costco", "Walmart"};

            for (String car : cars) {
                System.out.println(car);
            }

        Example2:
            int[] numbers = {15, 30, 45, 60};

            for (int num : numbers) {
                System.out.println(num);
            }

Arrays

    - Initializing array and populating items individually:
        Syntax:
            int[] numbers; // declaring array
            numbers = new int[5] // allocates memory for 5 integers
            ages[0] = 2;
            ages[1] = 5;
            ages[2] = 8;
            ages[3] = 11;
            ages[4] = 14;
    
    - Declaring and initializing array in one step (with array literal)
        Syntax:
            int[] numbers = {2, 5, 8, 11, 14};

Methods

    - Basically a function
    - Syntax (to create a method in Main)

        public class Main {
            static void myMethod() {
                // code to be executed
            }
        }

        Explanation:
            - myMethod() = name of the method
            - static = the method belongs to the class and isn't an object of the class.
            - void = this method doesn't have a return value.

    - Calling a method -> just like calling a function
    - Parameters (called arguments when it is passed into a method)

Recursion


Classes 
    Syntax (to create a new class):
        public class NewClass {
            int x = 5;
            String name = "daisy";
        }

    Syntax to create an object (an instance of a class)

        public class Main {
            public static void main(String[] args) {
                Main newObject = new myClass(); // creates new instance of the class
                System.out.println(newObject.name); // Access attributes in the class using the class.attributeName;
            }
        }

    - An object is an instance of a class!!


Finance Tracker in Java Design

Classes: 

FinanceTracker

    Methods: 
        - displayMenu()
        - closeTracker()
        - getUserInput(dataType) // like int, date, string, etc.

    Attributes:
        - menu

Transactions

    Methods:
        - new Transaction(date, description, amount)

    Attributes:
        - date
        - description
        - amount

Account

    Methods:
        - showBalance(date)
        - addTransaction()

    Attributes:
        balance
        name
        ArrayList<transaction> transactions

